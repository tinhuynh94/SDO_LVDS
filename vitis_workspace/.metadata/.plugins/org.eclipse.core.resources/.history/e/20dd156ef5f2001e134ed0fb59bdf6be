/******************************************************************************
* Copyright (C) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

// zed_LEDs.c

#include <stdio.h>
#include "platform.h"
#include "xgpio.h"
#include "xbasic_types.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "xscugic.h"
#include "xuartps.h"
#include "xuartps_hw.h"
#include "xil_exception.h"
#include "sleep.h"
#include "xttcps.h"


//----------------------------------------
// commands that can be received from the python application
//
#define CMD_SET_QSPI_CLK_DIV 		   0x20
#define CMD_GET_QSPI_CLK_DIV 		   0x21
#define CMD_QSPI_WRITE_REG             0x22
#define CMD_QSPI_READ_REG              0x23
#define CMD_QSPI_WRITE_SRAM            0x24
#define CMD_QSPI_READ_SRAM             0x25
#define CMD_QSPI_WRITE_COL             0x26
#define CMD_QSPI_READ_COL              0x27
#define CMD_SET_LVDS_CLK_DIV           0x28
#define CMD_GET_LVDS_CLK_DIV           0x29
#define CMD_LVDS_WRITE        		   0x2A
#define CMD_TOGGLE_LVDS_VPROG          0x2B
#define CMD_TOGGLE_LVDS_RESET          0x2C
#define CMD_TOGGLE_LVDS_DTB            0x2D
#define CMD_PROG_FUSES                 0x2E
#define CMD_READ_FUSES                 0x30
#define CMD_EN_LEV_SHIFT               0x31
#define CMD_DIS_LEV_SHIFT              0x32
#define CMD_EN_CLK25                   0x33
#define CMD_DIS_CLK25                  0x34
//----------------------------------------


//----------------------------------------
// responses that the zedboard will send back over UART
//
#define RESPONSE_QSPI_WRITE_DONE             0x80
#define RESPONSE_LVDS_DONE             0x81
#define RESPONSE_FUSE_PROG_DONE        0x82
//----------------------------------------


//----------------------------------------
// bit masks
//
#define BIT_0			    1
#define BIT_1			    2
#define BIT_2			    4
#define BIT_3			    8
#define BIT_4			    16
#define BIT_5			    32
#define BIT_6			    64
#define BIT_7			    128
#define BIT_8			    256
#define BIT_9			    512
#define BIT_10		    	1024
#define BIT_11			    2048
#define BIT_12			    4096
#define BIT_13			    8192
#define BIT_14			    16384
#define BIT_15			    32768
//
#define LVDS_VPROG_MASK     BIT_0
#define LVDS_RESET_MASK     BIT_1
#define LVDS_DTB_MASK       BIT_2
#define LVDS_BUSY_MASK      BIT_3
//
#define CLK25_MASK          BIT_0
#define LEV_SHIFT_MASK      BIT_0
//
#define QSPI_DIO_0			BIT_0
#define QSPI_DIO_1			BIT_1
#define QSPI_DIO_2			BIT_2
#define QSPI_DIO_3			BIT_3
#define QSPI_CLK_BIT		BIT_4
#define QSPI_CSB			BIT_5
//----------------------------------------


//----------------------------------------
// Macros (Inline Functions) Definitions
//
#define XAxi_ReadReg	Xil_In32
#define XAxi_WriteReg	Xil_Out32
//----------------------------------------


//----------------------------------------
// clock divider settings
//
#define DIV_1		1
#define DIV_2		2
#define DIV_4		4
#define DIV_8		8
#define DIV_16		16
#define DIV_32		32
#define DIV_64		64
#define DIV_128		128
//----------------------------------------


//----------------------------------------
// for UartPs
//
#define INTC				XScuGic
#define UARTPS_DEVICE_ID	XPAR_XUARTPS_0_DEVICE_ID
#define UART_INTC_DEVICE_ID	XPAR_SCUGIC_SINGLE_DEVICE_ID
#define UART_INT_IRQ_ID		XPAR_XUARTPS_1_INTR
#define UART_BASEADDR		XPAR_XUARTPS_0_BASEADDR
#define INTC_DEVICE_ID		XPAR_SCUGIC_0_DEVICE_ID
#define RX_BUFFER_SIZE	30
//----------------------------------------


//----------------------------------------
// state machine bit definitions
//
/*#define STATE_LED_RUNNING		0x01
#define	STATE_UPDATE_CONDITIONS	0x02
#define STATE_SERVICE_UART		0x04*/
//----------------------------------------


//----------------------------------------
// function declarations
static int SetupUartPs(INTC *IntcInstPtr, XUartPs *UartInstPtr,
			u16 DeviceId, u16 UartIntrId);
static int SetupUartInterruptSystem(INTC *IntcInstancePtr,
				XUartPs *UartInstancePtr,
				u16 UartIntrId);
static void UartPsISR(void *CallBackRef, u32 Event, unsigned int EventData);
static void InitGPIO(void);
static void InitUART(void);
static void ReadUartBytes(void);
static void send_byte_over_UART(Xuint8 byteToSend);
static void send_data_over_UART(unsigned int num_points_to_send, u8 *dataArray);
static void ChangeLvdsClkDivision(u8 divSetting);
//static void ChangeAsicClkDivision(u8 divSetting);
//static void ChangeFlashClkDivision(u8 divSetting);
static int InitializeDelayTimer(void);
static void SetTimerDuration(XInterval interval, u8 prescalar);
static void DelayTimerInterruptHandler(void *CallBackRef);
static void setQspiClk(u8 clkState);
static void setQspiCsb(u8 bitState);
static void setQspiDataBit(u8 qspiDataBit, u16 bitState);
static void serviceQspiClkEdge(void);
static void startQspiTransaction(u8 command, u16 address, u8 data);
//----------------------------------------


//----------------------------------------
// variables
static XScuGic interrupt_controller;	//instance of the interrupt controller
//
XGpio QSPI_xGPIO;
u8 uartReceivingData = FALSE;
unsigned int state = 0;
static XTtcPs DelayTimer;		// Timer counter instance
static u8 TimerErrorCount;		// Errors seen at interrupt time
static volatile u8 timerRunning;
//unsigned int numSpiClkCycles = 0;
unsigned int spiClkEdgeNumber = 0;
unsigned int numSpiClkEdgesInTransaction = 32;
u8 spiClkHigh;					// save the state of the clock signal
u8 qspiOutputStates;
u8 qspiCommand;					// global for Quad SPI command
u16 qspiAddress;				// global for Quad SPI address
u8 qspiData;					// global for Quad SPI data
u8 qspiDoutStates;				// stores the state of D0-D3
//
//
// for debug
unsigned int numEdgeTimeoutsServiced = 0;

XUartPs UartPs	;						// Instance of the UART Device
// @note: why static?
static u8 UartRxData[RX_BUFFER_SIZE];		// Buffer for Receiving Data

int Status;

u16 numUartBytesReceived;
//----------------------------------------


//----------------------------------------
// Commands specific to QSPI
//
#define QSPI_CMD_REG_READ	5
#define QSPI_CMD_REG_WRITE	6
#define QSPI_CMD_SRAM_READ	3
#define QSPI_CMD_SRAM_WRITE	2
#define QSPI_CMD_COL_READ	9
#define QSPI_CMD_COL_WRITE	8
//
// possible states for main while loop used to drive actions
//
#define SERVICE_UART			0x01
#define SERVICE_QSPI			0x02
//
// triple timer counter
//
#define DELAY_TIMER_DEVICE_ID	XPAR_XTTCPS_0_DEVICE_ID
#define DELAY_TIMER_INTERRUPT_ID	XPAR_XTTCPS_0_INTR
//----------------------------------------


//----------------------------------------
volatile unsigned int *lvdsClkDivider = (volatile unsigned int *) 0x43C00000;
volatile unsigned int *lvdsTx = (volatile unsigned int *) 0x43C10000;

u8 dummyVar;
XGpio miscLvdsGpio, clk25Gpio, levShiftGpio;
u32 dummyVar32 = 0x00000000;
#define GPIO_CHANNEL 		   1	// all GPIO ports defined in the PL as single channel
#define CLK25_GPIO_ID          XPAR_EN_25MHZ_GPIO_DEVICE_ID
#define LEV_SHIFT_GPIO_ID      XPAR_LEV_SHIFT_OE_GPIO_DEVICE_ID
#define MISC_LVDS_GPIO_ID      XPAR_MISC_LVDS_GPIO_DEVICE_ID
#define QSPI_GPIO_ID		   XPAR_QSPI_GPIO_DEVICE_ID

int main()
{
	init_platform();
	InitGPIO();
	InitUART();
	InitializeDelayTimer();

	/*u8 _cmd = QSPI_CMD_COL_READ;
	u16 _addr = 0xAA5F;
	u8 _data = 0x37;
	u8 testSpiAgain = 0;*/
	int looping = 1;

	lvdsTx[2] = 0x00000000; // Disable LVDS_Tx WRITE
	//ReadUartBytes();

    //###################################################################
    //-------------------------------------------------------------------
	while(looping){// loop here and let interrupts drive further actions

		//-------------------------------------------------------------------
		// uart received data so retrieve command
		if (state & SERVICE_UART){

			//read_uart_bytes();
			state &= ~SERVICE_UART;
		}
		//-------------------------------------------------------------------

		//-------------------------------------------------------------------
		// timer used for QSPI expired so check if something needs to be done on this edge
		if (state & SERVICE_QSPI){

			serviceQspiClkEdge();
			state &= ~SERVICE_QSPI;
		}
		//-------------------------------------------------------------------

		// just for debugging
		/*if (testSpiAgain){
			startQspiTransaction(_cmd, _addr, _data);
			testSpiAgain = 0;
		}*/
	}

	cleanup_platform();
	return 0;
}
//------------------------------------------------------------


//------------------------------------------------------------
int SetupUartPs(INTC *IntcInstPtr, XUartPs *UartInstPtr,
			u16 DeviceId, u16 UartIntrId)
{
	int Status;
	XUartPs_Config *Config;
	u32 IntrMask;


	/*
	 * Initialize the UART driver so that it's ready to use
	 * Look up the configuration in the config table, then initialize it.
	 */
	Config = XUartPs_LookupConfig(DeviceId);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XUartPs_CfgInitialize(UartInstPtr, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Check hardware build */
	Status = XUartPs_SelfTest(UartInstPtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Connect the UART to the interrupt subsystem such that interrupts
	 * can occur. This function is application specific.
	 */
	Status = SetupUartInterruptSystem(IntcInstPtr, UartInstPtr, UartIntrId);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Setup the handlers for the UART that will be called from the
	 * interrupt context when data has been sent and received, specify
	 * a pointer to the UART driver instance as the callback reference
	 * so the handlers are able to access the instance data
	 */
	XUartPs_SetHandler(UartInstPtr, (XUartPs_Handler)UartPsISR, UartInstPtr);

	/*
	 * Enable the interrupt of the UART so interrupts will occur, setup
	 * a local loopback so data that is sent will be received.
	 */
	IntrMask =
		XUARTPS_IXR_TOUT | XUARTPS_IXR_PARITY | XUARTPS_IXR_FRAMING |
		XUARTPS_IXR_OVER | XUARTPS_IXR_TXEMPTY | XUARTPS_IXR_RXFULL |
		XUARTPS_IXR_RXOVR;

	if (UartInstPtr->Platform == XPLAT_ZYNQ_ULTRA_MP) {
		IntrMask |= XUARTPS_IXR_RBRK;
	}

	XUartPs_SetInterruptMask(UartInstPtr, IntrMask);

	XUartPs_SetOperMode(UartInstPtr, XUARTPS_OPER_MODE_NORMAL);

	/*
	 * Set the receiver timeout. If it is not set, and the last few bytes
	 * of data do not trigger the over-water or full interrupt, the bytes
	 * will not be received. By default it is disabled.
	 *
	 * The setting of 8 will timeout after 8 x 4 = 32 character times.
	 * Increase the time out value if baud rate is high, decrease it if
	 * baud rate is low.
	 */
	XUartPs_SetRecvTimeout(UartInstPtr, 8);

	return XST_SUCCESS;
}
//------------------------------------------------------------


void UartPsISR(void *CallBackRef, u32 Event, unsigned int EventData)
{
//	xil_printf("IRQ handler!\n");

	/* All of the data has been sent */
	if (Event == XUARTPS_EVENT_SENT_DATA) {
	}

	/* All of the data has been received */
	if (Event == XUARTPS_EVENT_RECV_DATA) {
		if (uartReceivingData){
			uartReceivingData = FALSE;
		}
		else{
			state |= SERVICE_UART;
		}
	}

	/*
	 * Data was received, but not the expected number of bytes, a
	 * timeout just indicates the data stopped for 8 character times
	 */
	if (Event == XUARTPS_EVENT_RECV_TOUT) {
//		xil_printf("3\n");
	}

	/*
	 * Data was received with an error, keep the data but determine
	 * what kind of errors occurred
	 */
	if (Event == XUARTPS_EVENT_RECV_ERROR) {
//		xil_printf("4\n");
	}

	/*
	 * Data was received with an parity or frame or break error, keep the data
	 * but determine what kind of errors occurred. Specific to Zynq Ultrascale+
	 * MP.
	 */
	if (Event == XUARTPS_EVENT_PARE_FRAME_BRKE) {
//		xil_printf("5\n");
	}

	/*
	 * Data was received with an overrun error, keep the data but determine
	 * what kind of errors occurred. Specific to Zynq Ultrascale+ MP.
	 */
	if (Event == XUARTPS_EVENT_RECV_ORERR) {
//		xil_printf("6\n");
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
static int SetupUartInterruptSystem(INTC *IntcInstancePtr,
				XUartPs *UartInstancePtr,
				u16 UartIntrId)
{
	int Status;

	XScuGic_Config *IntcConfig; /* Config for interrupt controller */

	/* Initialize the interrupt controller driver */
	IntcConfig = XScuGic_LookupConfig(UART_INTC_DEVICE_ID);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
					IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Connect the interrupt controller interrupt handler to the
	 * hardware interrupt handling logic in the processor.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
				(Xil_ExceptionHandler) XScuGic_InterruptHandler,
				IntcInstancePtr);

	/*
	 * Connect a device driver handler that will be called when an
	 * interrupt for the device occurs, the device driver handler
	 * performs the specific interrupt processing for the device
	 */
	Status = XScuGic_Connect(IntcInstancePtr, UartIntrId,
				  (Xil_ExceptionHandler) XUartPs_InterruptHandler,
				  (void *) UartInstancePtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Enable the interrupt for the device */
	XScuGic_Enable(IntcInstancePtr, UartIntrId);


	/* Enable interrupts */
	 Xil_ExceptionEnable();


	return XST_SUCCESS;
}
//------------------------------------------------------------


//------------------------------------------------------------
void InitGPIO(void){
	//------------------------------
	Status = XGpio_Initialize(&miscLvdsGpio, MISC_LVDS_GPIO_ID);
	if (Status != XST_SUCCESS) {
		return;
	}

	XGpio_SetDataDirection(&miscLvdsGpio, 1, 0b1100);
			// 3rd argument: 1=input, 0=output
			// Bit 0: VPROG CTRL (output from FPGA)
			// Bit 1: RESET CTRL (output from FPGA)
			// Bit 2: DTB (inout)
			// Bit 3: BUSY (input into FPGA)

	//XGpio_DiscreteWrite(&miscLvdsGpio, GPIO_CHANNEL, 0b1111);
	//------------------------------

	//------------------------------
	// initialize 6-bit port used for quad spi lines
	Status = XGpio_Initialize(&QSPI_xGPIO, QSPI_GPIO_ID);
	if (Status != XST_SUCCESS){
		return;
	}
	XGpio_SetDataDirection(&QSPI_xGPIO, GPIO_CHANNEL, 0x00);	// 1=input, 0=output, all 6 bits set as outputs
	XGpio_DiscreteWrite(&QSPI_xGPIO, GPIO_CHANNEL, QSPI_CSB);	// CSb only line initially set high
	//------------------------------

	//------------------------------
	Status = XGpio_Initialize(&clk25Gpio, CLK25_GPIO_ID);
	if (Status != XST_SUCCESS){
		return;
	}
	XGpio_SetDataDirection(&clk25Gpio, GPIO_CHANNEL, 0b0);	// 1=input, 0=output
	//------------------------------

	//------------------------------
	Status = XGpio_Initialize(&levShiftGpio, LEV_SHIFT_GPIO_ID);
	if (Status != XST_SUCCESS){
		return;
	}
	XGpio_SetDataDirection(&levShiftGpio, GPIO_CHANNEL, 0b0);	// 1=input, 0=output
}
//------------------------------------------------------------


//------------------------------------------------------------
void InitUART(void){
	Status = SetupUartPs(&interrupt_controller, &UartPs,
					UARTPS_DEVICE_ID, UART_INT_IRQ_ID);
	if (Status != XST_SUCCESS) {
		xil_printf("Failed to set up UartPs\r\n");
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
void ReadUartBytes(void){
	u8 numBytesReceived = 0;
	unsigned int commandByte;

	// loop through Uart Rx buffer and store received data
	while (XUartPs_IsReceiveData(UART_BASEADDR)){
		UartRxData[numBytesReceived++] = XUartPs_ReadReg(UART_BASEADDR,
					    					XUARTPS_FIFO_OFFSET);
	}

	// stored for debugging purposes
	numUartBytesReceived = numBytesReceived;

	//take first received byte as the command
	commandByte = (unsigned int)UartRxData[0];
	//commandByte = CMD_WRITE_LVDS;

	// Initialize variables to be used in multiple cases
	int toggle;
	u8 current, new;

	// check received byte for valid command
	switch (commandByte){
		/*case (CMD_SET_LVDS_CLK_DIV):
			//verify clock division setting byte was received after command byte
			if (numBytesReceived<2){
				return;
			}

			// second byte received has the division setting
			ChangeQspiClkDivision(UartRxData[1]);
			break;*/

		case (CMD_QSPI_WRITE_REG):
			//verify address byte and data byte received after command byte
			/*if (numBytesReceived<3){
				return;
			}*/
			u8 regAddr = (u8)UartRxData[1];
			u8 regData = (u8)UartRxData[2];
			//startQspiTransaction(QSPI_CMD_REG_WRITE, regAddr, regData);
			send_byte_over_UART(RESPONSE_QSPI_WRITE_DONE);
			break;

		case (CMD_EN_CLK25):
			XGpio_DiscreteWrite(&clk25Gpio, GPIO_CHANNEL, CLK25_MASK);
			break;

		case (CMD_DIS_CLK25):
			XGpio_DiscreteWrite(&clk25Gpio, GPIO_CHANNEL, ~CLK25_MASK);
			break;

		case (CMD_EN_LEV_SHIFT):
			XGpio_DiscreteWrite(&levShiftGpio, GPIO_CHANNEL, LEV_SHIFT_MASK);
			break;

		case (CMD_DIS_LEV_SHIFT):
			XGpio_DiscreteWrite(&levShiftGpio, GPIO_CHANNEL, ~LEV_SHIFT_MASK);
			break;

		case (CMD_LVDS_WRITE):
			//verify 2 address bytes, 1 data byte received after command byte
			if (numBytesReceived<4){
				return;
			}

			u8 sofByte = 0b01111110;
			u8 lvdsAddr1 = (u8)UartRxData[1];
			u8 lvdsAddr2 = (u8)UartRxData[2];
			u8 lvdsData = (u8)UartRxData[3];
			u8 eofByte = 0b10000001;

			//lvdsTx[0] = 0xAAAAAAAA;
			//lvdsTx[1] = 0x000000AA;

			lvdsTx[0] = (sofByte << 24) | (lvdsAddr1 << 16) |
					(lvdsAddr2 << 8) | lvdsData; // 32 MSBs of message to be sent
			lvdsTx[1] = eofByte & 0x000000FF; // 8 LSBs of message to be sent*/
			lvdsTx[2] = 0x00000001; // Enable LVDS_Tx WRITE
			while(lvdsTx[3] == 0){
				//xil_printf("hi\n");
				continue;
			}
			lvdsTx[2] = 0x00000000; // Disable LVDS_Tx WRITE
			send_byte_over_UART(RESPONSE_LVDS_DONE);
			//xil_printf("done\n");
			break;

		case (CMD_TOGGLE_LVDS_VPROG):
			//verify toggle setting byte received after command byte
			if (numBytesReceived<2){
				return;
			}

			toggle = (int)UartRxData[1];
			current = XGpio_DiscreteRead(&miscLvdsGpio,1); // current settings of each of the MISC bits
			if (toggle){
				new = current | LVDS_VPROG_MASK;
			}
			else{
				new = current & ~LVDS_VPROG_MASK;
			}

			XGpio_DiscreteWrite(&miscLvdsGpio, 1, new);
			break;

		case (CMD_TOGGLE_LVDS_RESET):
			//verify toggle setting byte received after command byte
			if (numBytesReceived<2){
				return;
			}

			toggle = (int)UartRxData[1];
			current = XGpio_DiscreteRead(&miscLvdsGpio,1); // current settings of each of the MISC bits
			if (toggle){
				new = current | LVDS_RESET_MASK;
			}
			else{
				new = current & ~LVDS_RESET_MASK;
			}

			XGpio_DiscreteWrite(&miscLvdsGpio, 1, new);
			break;

		case (CMD_TOGGLE_LVDS_DTB):
			//verify toggle setting byte received after command byte
			if (numBytesReceived<2){
				return;
			}

			toggle = (int)UartRxData[1];
			current = XGpio_DiscreteRead(&miscLvdsGpio,1); // current settings of each of the MISC bits
			XGpio_SetDataDirection(&miscLvdsGpio, 1, 0b0100); // set Bit 3 (DBT) to output
			if (toggle){
				new = current | LVDS_DTB_MASK;
			}
			else{
				new = current & ~LVDS_DTB_MASK;
			}

			XGpio_DiscreteWrite(&miscLvdsGpio, 1, new);
			break;

		case (CMD_PROG_FUSES):
			//verify at least 1 Fuse ID bytes received after command byte
			if (numBytesReceived < 2){
				return;
			}

			u8 idByte1 = (u8)UartRxData[1];
			u8 idByte2 = (u8)UartRxData[2];
			u8 idByte3 = (u8)UartRxData[3];
			u32 fuseID = (idByte1 << 16) | (idByte2 << 8) | idByte3;

			// 1. QSPI: set BUSY=0 and BUSY bits (reg 0) to 0

			// 2. QSPI: Read fuse data (regs 8-10) and verify that fuses are not already blown (regs 8-11 are 0x00)

			// 4. QSPI: Set fuse WRITE_EN high (reg12 bit 5)

			// 5. QSPI: Toggle fuse RESETP high, then low (reg12 bit 2)

			dummyVar32 = 0x00000000;
			for(int i=0;i<24;i++){
				// Set CLK1=1 (reg12 bit 0)
				if((fuseID >> i) & 1){
					// 6. QSPI: Set START=1 (reg12 bit 4)
					dummyVar32 |= (0x00000001 << i);
				}
				usleep(5); // 7.
				// 8. QSPI: Set CLK1=0 (reg12 bit 0) and START=0 (reg12 bit 4)
				usleep(5); // 9.
				// 10. QSPI: Set CLK1=1 (reg12 bit 0) and START=0 (reg12 bit 4)
			}
			// 15. QSPI: Set reg12 back to 0x00

			// 17. Execute fuse load sequence to verify
			// QSPI: set START=1 (reg12 bit 4)
			usleep(5);
			// QSPI: set START=0 (reg12 bit 4)
			usleep(5);
			//dummyVar32 += 1;
			send_byte_over_UART(RESPONSE_FUSE_PROG_DONE);
			break;

		case (CMD_READ_FUSES):
			/*******************************************************
				Code to read from regs 8-10 via QSPI goes here
			*******************************************************/

			u8 _idByte1 = (u8) (dummyVar32 >> 16);
			u8 _idByte2 = (u8) (dummyVar32 >> 8);
			u8 _idByte3 = (u8) (dummyVar32);

			u8 idArray[] = {_idByte1, _idByte2, _idByte3};
			send_data_over_UART(3, (u8*)idArray);


		/*case (CMD_SET_FLASH_CLK_DIV):
			//verify clock division setting byte was received after command byte
			if (numBytesReceived<2)
			{
				return;
			}

			// second byte received has the division setting
			ChangeFlashClkDivision(UartRxData[1]);

			// use new variable in call to configuration function
			//setFlashClkDivision(Flash_CLK_div_setting);
			break;*/
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
void ChangeLvdsClkDivision(u8 divSetting)
{
	switch (divSetting){
		case (DIV_1):
			lvdsClkDivider[0] = 0x00000000;
			break;
		case (DIV_2):
			lvdsClkDivider[0] = 0x00000001;
			break;
		case (DIV_4):
			lvdsClkDivider[0] = 0x00000002;
			break;
		case (DIV_8):
			lvdsClkDivider[0] = 0x00000003;
			break;
		case (DIV_16):
			lvdsClkDivider[0] = 0x00000004;
			break;
		case (DIV_32):
			lvdsClkDivider[0] = 0x00000005;
			break;
		case (DIV_64):
			lvdsClkDivider[0] = 0x00000006;
			break;
		case (DIV_128):
			lvdsClkDivider[0] = 0x00000007;
			break;
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
int InitializeDelayTimer(void)
{
	int Status;
	XTtcPs_Config *Config;

	/*
	 * Look up the configuration based on the device identifier
	 */
	Config = XTtcPs_LookupConfig(DELAY_TIMER_DEVICE_ID);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	/*
	 * Initialize the device
	 */
	Status = XTtcPs_CfgInitialize(&DelayTimer, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Set up appropriate options for Ticker: interval mode without
	 * waveform output.
	 */
	u16 TimerOptions = (XTTCPS_OPTION_INTERVAL_MODE |
						  XTTCPS_OPTION_WAVE_DISABLE);

	/*
	 * Set the options
	 */
	XTtcPs_SetOptions(&DelayTimer, TimerOptions);
	XTtcPs_SetInterval(&DelayTimer, 1000);
	XTtcPs_SetPrescaler(&DelayTimer, 2);

	/*
	 * Connect to the interrupt controller
	 */
	Status = XScuGic_Connect(&interrupt_controller, DELAY_TIMER_INTERRUPT_ID,
		(Xil_InterruptHandler)DelayTimerInterruptHandler, (void *)&DelayTimer);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Enable interrupts for the ttc in global interrupt controller
	 */
	XScuGic_Enable(&interrupt_controller, DELAY_TIMER_INTERRUPT_ID);

	/*
	 * Enable the interval timeout interrupt in this ttc instance
	 */
	XTtcPs_EnableInterrupts(&DelayTimer, XTTCPS_IXR_INTERVAL_MASK);

	return Status;
}
//------------------------------------------------------------


//------------------------------------------------------------
void SetTimerDuration(XInterval num10nsecCounts, u8 prescalar)
{
	/*
	 * Set the interval and prescaler
	 */
	XTtcPs_SetInterval(&DelayTimer, num10nsecCounts);

	if (prescalar == 1)
	{
		prescalar = XTTCPS_CLK_CNTRL_PS_DISABLE;
	}
	XTtcPs_SetPrescaler(&DelayTimer, prescalar);
}
//------------------------------------------------------------


//------------------------------------------------------------
void DelayTimerInterruptHandler(void *CallBackRef)
{
	u32 StatusEvent;

	/*
	 * Read the interrupt status, then write it back to clear the interrupt.
	 */
	StatusEvent = XTtcPs_GetInterruptStatus((XTtcPs *)CallBackRef);
	XTtcPs_ClearInterruptStatus((XTtcPs *)CallBackRef, StatusEvent);

	if (0 != (XTTCPS_IXR_INTERVAL_MASK & StatusEvent)) {


		// should set a flag that will be used in the main loop (state machine) to
		// service the QSPI and do what is needed based on clock edge number
		state |= SERVICE_QSPI;

		// toggle the spi clk signal
		if (spiClkHigh){
			setQspiClk(0);	// change clk to low state
		}
		else{
			setQspiClk(1);	// change clk to high state
		}

		// stop timer if spi transaction has completed  spiClkEdgeNumber numSpiClkCyclesInTransaction
		if (spiClkEdgeNumber == numSpiClkEdgesInTransaction){ // subtract 1 since count starts at 0		timerRunning = FALSE;
			setQspiCsb(1);
			spiClkEdgeNumber = 0;
			XTtcPs_Stop(&DelayTimer);
		}
		else{
			spiClkEdgeNumber++;
		}
	}
	else {
		/*
		 * The Interval event should be the only one enabled. If it is
		 * not it is an error
		 */
		TimerErrorCount++;
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
void setQspiCsb(u8 bitState){
	u32 portState;
	portState = XGpio_DiscreteRead(&QSPI_xGPIO, GPIO_CHANNEL);

	if (bitState == 0){
		spiClkHigh = FALSE;
		XGpio_DiscreteWrite(&QSPI_xGPIO, GPIO_CHANNEL, portState & ~QSPI_CSB);
	}
	else{
		spiClkHigh = TRUE;
		XGpio_DiscreteWrite(&QSPI_xGPIO, GPIO_CHANNEL, portState | QSPI_CSB);
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
void setQspiClk(u8 clkState){
	u32 portState;
	portState = XGpio_DiscreteRead(&QSPI_xGPIO, GPIO_CHANNEL);

	if (clkState == 0){
		spiClkHigh = FALSE;
		XGpio_DiscreteWrite(&QSPI_xGPIO, GPIO_CHANNEL, portState & ~QSPI_CLK_BIT);
	}
	else{
		spiClkHigh = TRUE;
		XGpio_DiscreteWrite(&QSPI_xGPIO, GPIO_CHANNEL, portState | QSPI_CLK_BIT);
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
void setQspiDataLine(u8 dataLine, u16 lineState){
	/*
	 * dataLine can be: QSPI_DIO_0, QSPI_DIO_1, QSPI_DIO_2, QSPI_DIO_3
	 */
	u32 portState;
	portState = XGpio_DiscreteRead(&QSPI_xGPIO, GPIO_CHANNEL);

	if (lineState == 0){
		spiClkHigh = FALSE;
		XGpio_DiscreteWrite(&QSPI_xGPIO, GPIO_CHANNEL, portState & ~dataLine);
	}
	else{
		spiClkHigh = TRUE;
		XGpio_DiscreteWrite(&QSPI_xGPIO, GPIO_CHANNEL, portState | dataLine);
	}
}
//------------------------------------------------------------


//------------------------------------------------------------
void startQspiTransaction(u8 command, u16 address, u8 data){
	/*
	 *
	 */
	qspiCommand = command;
	qspiAddress = address;
	qspiData = data;
	unsigned int delayTime;

	// chip select goes low at beginning of transaction
	setQspiCsb(0);

	// delay after chip select goes low
	for(delayTime=200; delayTime>0; delayTime--);

	// set the first bit of the command before the clock is pulsed high
	setQspiDataLine(QSPI_DIO_0, command & BIT_3);

	// delay after chip select goes low
	for(delayTime=200; delayTime>0; delayTime--);

	// start the timer now that will take care of the rest of the clock pulses
	timerRunning = 1;
	XTtcPs_Start(&DelayTimer);

}
//------------------------------------------------------------


//------------------------------------------------------------
void serviceQspiClkEdge(void){
	/* 16 clocks per qspi transaction, 32 clock edges
	 * SCLK starts low, 1st high edge is number 0 last falling edge is number 31
	 * rising edges are 0 and even, falling edges are odd
	 *
	 * This function uses a counter incremented in the timer interrupt service routine
	 * to find the state to set four QSPI data bits during the transaction
	 */

	switch (spiClkEdgeNumber){
	case(0):
	}
	switch (spiClkEdgeNumber){

		case (1):
			setQspiDataLine(QSPI_DIO_0, (qspiCommand & BIT_2) );
			break;

		case (3):
			setQspiDataLine(QSPI_DIO_0, (qspiCommand & BIT_1) );
			break;

		case (5):
			setQspiDataLine(QSPI_DIO_0, (qspiCommand & BIT_0) );
			break;

		case (11):
			setQspiDataLine(QSPI_DIO_0, (qspiAddress & BIT_12) );
			setQspiDataLine(QSPI_DIO_1, (qspiAddress & BIT_13) );
			setQspiDataLine(QSPI_DIO_2, (qspiAddress & BIT_14) );
			setQspiDataLine(QSPI_DIO_3, (qspiAddress & BIT_15) );
			break;

		case (13):
			setQspiDataLine(QSPI_DIO_0, (qspiAddress & BIT_8) );
			setQspiDataLine(QSPI_DIO_1, (qspiAddress & BIT_9) );
			setQspiDataLine(QSPI_DIO_2, (qspiAddress & BIT_10) );
			setQspiDataLine(QSPI_DIO_3, (qspiAddress & BIT_11) );
			break;

		case (15):
			setQspiDataLine(QSPI_DIO_0, (qspiAddress & BIT_4) );
			setQspiDataLine(QSPI_DIO_1, (qspiAddress & BIT_5) );
			setQspiDataLine(QSPI_DIO_2, (qspiAddress & BIT_6) );
			setQspiDataLine(QSPI_DIO_3, (qspiAddress & BIT_7) );
			break;

		case (17):
			setQspiDataLine(QSPI_DIO_0, (qspiAddress & BIT_0) );
			setQspiDataLine(QSPI_DIO_1, (qspiAddress & BIT_1) );
			setQspiDataLine(QSPI_DIO_2, (qspiAddress & BIT_2) );
			setQspiDataLine(QSPI_DIO_3, (qspiAddress & BIT_3) );
			break;

		case (27):
			setQspiDataLine(QSPI_DIO_0, (qspiData & BIT_4) );
			setQspiDataLine(QSPI_DIO_1, (qspiData & BIT_5) );
			setQspiDataLine(QSPI_DIO_2, (qspiData & BIT_6) );
			setQspiDataLine(QSPI_DIO_3, (qspiData & BIT_7) );
			break;

		case (29):
			setQspiDataLine(QSPI_DIO_0, (qspiData & BIT_0) );
			setQspiDataLine(QSPI_DIO_1, (qspiData & BIT_1) );
			setQspiDataLine(QSPI_DIO_2, (qspiData & BIT_2) );
			setQspiDataLine(QSPI_DIO_3, (qspiData & BIT_3) );
			break;
	}
}
//------------------------------------------------------------

//------------------------------------------------------------
/*void ChangeQspiClkDivision(u8 divSetting)
{
	switch (divSetting){
		case (DIV_1):
			qspiClkSel[0] = 0x00000000;
			break;
		case (DIV_2):
			qspiClkSel[0] = 0x00000001;
			break;
		case (DIV_4):
			qspiClkSel[0] = 0x00000002;
			break;
		case (DIV_8):
			qspiClkSel[0] = 0x00000003;
			break;
		case (DIV_16):
			qspiClkSel[0] = 0x00000004;
			break;
		case (DIV_32):
			qspiClkSel[0] = 0x00000005;
			break;
		case (DIV_64):
			qspiClkSel[0] = 0x00000006;
			break;
		case (DIV_128):
			qspiClkSel[0] = 0x00000007;
			break;
	}
}*/
//------------------------------------------------------------


//------------------------------------------------------------
void send_byte_over_UART(Xuint8 byteToSend)
{
	/* Wait until there is space in TX FIFO */
	 while (XUartPs_IsTransmitFull(XPAR_XUARTPS_0_BASEADDR));

	/* Write the byte into the TX FIFO */
	XUartPs_WriteReg(XPAR_XUARTPS_0_BASEADDR, XUARTPS_FIFO_OFFSET,
						byteToSend);
}
//------------------------------------------------------------


//------------------------------------------------------------
void send_data_over_UART(unsigned int num_bytes_to_send, u8 *dataArray)
{
	int i;
	// send the data array to the transmit buffer as space is available
	for (i = 0; i < num_bytes_to_send; i++) {
		/* Wait until there is space in TX FIFO */
		 while (XUartPs_IsTransmitFull(XPAR_XUARTPS_0_BASEADDR));

		/* Write the byte into the TX FIFO */
		XUartPs_WriteReg(XPAR_XUARTPS_0_BASEADDR, XUARTPS_FIFO_OFFSET,
				dataArray[i]);
	}
}
//------------------------------------------------------------
